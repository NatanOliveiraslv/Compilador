import java_cup.runtime.*;

parser code {:
    FLexer s;
    Parser(FLexer s) { this.s = s; }
    java.util.Map<String, Double> tabela = new java.util.HashMap<>();
:}

init with {: :};
scan with {: return s.next_token(); :};

/* Tokens */
terminal TENTAISSO, SENAODERFAZISSO, REPETIDOR, IGUAL, DIFERENTE, SEMI, MENOR, MAIOR, MAIS, LCOLCHETE, RCOLCHETE, MENOS, VEZES, LPAREN, RPAREN, ATRIB, JOGANATELA;
terminal Boolean TRUE, FALSE;
terminal Integer INT;
terminal Double FLOAT;
terminal String ID, STRING;

/* Não terminais */
non terminal inicio;
non terminal Double exp, flutuante;
non terminal Integer inteiro;
non terminal Boolean condicao;
non terminal Runnable estruturas, logica, print;

/* Precedência */
precedence left MAIS, MENOS;
precedence left VEZES;

/* Regras */
inicio ::= estruturas:e {: e.run(); :};

estruturas ::= logica:l                    {: RESULT = l; :}
             | estruturas:e1 logica:l      {: RESULT = () -> { e1.run(); l.run(); }; :}
             | exp:e SEMI                  {: RESULT = () -> {}; :}
             | estruturas:e1 exp:e SEMI    {: RESULT = () -> { e1.run(); }; :}
             | print:p                     {: RESULT = p; :}
             | estruturas:e1 print:p       {: RESULT = () -> { e1.run(); p.run(); }; :}
             ;

logica ::= TENTAISSO LPAREN condicao:c RPAREN LCOLCHETE estruturas:bloco RCOLCHETE
    {: 
        RESULT = () -> {
            if (c) {
                bloco.run();
            }
        };
    :}
    | TENTAISSO LPAREN condicao:c RPAREN LCOLCHETE estruturas:bloco RCOLCHETE SENAODERFAZISSO LCOLCHETE estruturas:bloco2 RCOLCHETE
    {: 
        RESULT = () -> {
            if (c) {
                bloco.run();
            } else {
                bloco2.run();
            }
        };
    :}
    | REPETIDOR LPAREN condicao:c RPAREN LCOLCHETE estruturas:bloco RCOLCHETE
    {: 
        RESULT = () -> {
            while (c) {
                bloco.run();
            }
        };
    :}
    | REPETIDOR LPAREN inteiro:c RPAREN LCOLCHETE estruturas:bloco RCOLCHETE
    {: 
        RESULT = () -> {
            for(int i = 0; i < c; i++) {
                bloco.run();
            }
        };
    :}
    ;

print ::= JOGANATELA LPAREN exp:e RPAREN SEMI         {: RESULT = () -> System.out.println(e); :}
       | JOGANATELA LPAREN STRING:s RPAREN SEMI       {: RESULT = () -> System.out.println(s); :}
       ;

exp ::= exp:e1 MAIS exp:e2       {: RESULT = e1 + e2; :}
     | exp:e1 MENOS exp:e2       {: RESULT = e1 - e2; :}
     | exp:e1 VEZES exp:e2       {: RESULT = e1 * e2; :}
     | MENOS exp:e               {: RESULT = -e; :}
     | LPAREN exp:e RPAREN       {: RESULT = e; :}
     | inteiro:n                 {: RESULT = (double) n; :}
     | flutuante:n               {: RESULT = n; :}
     | ID:i                      {: RESULT = tabela.getOrDefault(i, 0.0); :}
     | ID:i ATRIB exp:e          {: tabela.put(i, e); RESULT = e; :}
     ;

inteiro ::= INT:n {: RESULT = n; :}
         ;

flutuante ::= FLOAT:n {: RESULT = n; :}
           ;
        

condicao ::= exp:e1 IGUAL exp:e2       {: RESULT = e1.equals(e2); :}
           | exp:e1 DIFERENTE exp:e2   {: RESULT = !e1.equals(e2); :}
           | exp:e1 MENOR exp:e2       {: RESULT = e1 < e2; :}
           | exp:e1 MAIOR exp:e2       {: RESULT = e1 > e2; :}
           | TRUE                      {: RESULT = true; :}
           | FALSE                     {: RESULT = false; :}
           ;